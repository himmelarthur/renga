datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Party {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rengas    Renga[]
  users     User[]
}

model Movie {
  id            Int             @default(autoincrement()) @id
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  movieDBId     Int
  genres        Int[]
  title         String
  year          Int
  rengas        Renga[]
  PlaylistRenga PlaylistRenga[]
}

model Renga {
  id           Int          @default(autoincrement()) @id
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  emojis       String[]
  submissions  Submission[]
  movie        Movie        @relation(fields: [movieId], references: [id])
  movieId      Int
  author       User         @relation(fields: [authorId], references: [id])
  authorId     Int
  party        Party        @relation(fields: [partyId], references: [id])
  partyId      String
  likedBy      User[]       @relation("likes", references: [id])
  likeCount    Int          @default(0)
  solverCount  Int          @default(0)
  attemptCount Int          @default(0)
  successRatio Float        @default(0)
  Hint         Hint[]
}

enum HintType {
  TIMELINE
  YEAR
  GENRES
}

model Hint {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  renga     Renga    @relation(fields: [rengaId], references: [id])
  rengaId   Int
  type      HintType

  @@index([rengaId], name: "Hint_Renga_fkey")
  @@index([userId], name: "Hint_User_fkey")
}

model User {
  id         Int          @default(autoincrement()) @id
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  username   String
  party      Party        @relation(fields: [partyId], references: [id])
  partyId    String
  score      Int          @default(0)
  rengas     Renga[]
  hintCount  Int          @default(3)
  likes      Renga[]      @relation("likes", references: [id])
  Hint       Hint[]
  Submission Submission[]
}

model Submission {
  id              Int      @default(autoincrement()) @id
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  author          User     @relation(fields: [authorId], references: [id])
  authorId        Int
  renga           Renga    @relation(fields: [rengaId], references: [id])
  rengaId         Int
  valid           Boolean  @default(false)
  movieTitle      String
  movieDBId       Int
  playlistRengaId Int?

  @@index([rengaId], name: "Renga_fkey")
}

model PlaylistRenga {
  id         Int       @default(autoincrement()) @id
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  emojis     String[]
  movie      Movie     @relation(fields: [movieId], references: [id])
  movieId    Int
  playlist   Playlist  @relation(fields: [playlistId], references: [id])
  playlistId String
}

model Playlist {
  id        String          @id
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  rengas    PlaylistRenga[]
}